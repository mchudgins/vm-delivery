AWSTemplateFormatVersion: 2010-09-09
Description: 'Provides networking configuration for an Openshift alpha VPC with NACL rules (qs-1nb14cqcl).'
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
                default: VPC Configuration
            Parameters:
              - pVPCName
              - pProductionCIDR
              - pVPCTenancy
        ParameterLabels:
            pVPCName:
                default: Name of VPC
            pProductionCIDR:
                default: VPC CIDR block
Parameters:
    pVPCName:
        Description: Production VPC Name
        Type: String
        Default: o7t-alpha
    pProductionCIDR:
        Description: CIDR block for Production VPC
        Type: String
        Default: 10.250.0.0/16
    pVPCTenancy:
        Description: Instance tenancy behavior for this VPC
        Type: String
        Default: default
        AllowedValues:
          - default
    pEnvironment:
        Description: Environment (alpha, CI/CD, or development)
        Type: String
        Default: alpha
        AllowedValues:
          - alpha
          - CI/CD
          - development

Resources:
  rDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: dst.cloud
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Ref pVPCName
      - Key: StackName
        Value: !Ref AWS::StackName

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pProductionCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref pVPCName
      - Key: Environment
        Value: !Ref pEnvironment
      - Key: StackName
        Value: !Ref AWS::StackName
      - Key: VPC
        Value: !Ref pVPCName

  rVPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    DependsOn: rVPC
    Properties:
      VpcId:
        Ref: rVPC
      DhcpOptionsId:
        Ref: rDHCPOptions

  rIGWProd:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
            - Key: Name
              Value: !Ref pVPCName
            - Key: Environment
              Value: !Ref pEnvironment

  rRouteProdIGW:
      Type: AWS::EC2::Route
      DependsOn: rGWAttachmentProdIGW
      Properties:
          RouteTableId: !Ref rRouteTableMain
          GatewayId: !Ref rIGWProd
          DestinationCidrBlock: 0.0.0.0/0

  rRouteTableMain:
      Type: AWS::EC2::RouteTable
      DependsOn: rVPC
      Properties:
          VpcId: !Ref rVPC
          Tags:
            - Key: Name
              Value: !Sub ${pVPCName}-public

  rGWAttachmentProdIGW:
      Type: AWS::EC2::VPCGatewayAttachment
      DependsOn: rIGWProd
      Properties:
          VpcId: !Ref rVPC
          InternetGatewayId: !Ref rIGWProd

  rMasterSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rVPC
    Properties:
      GroupName: !Sub ${pVPCName}-master
      GroupDescription: Openshift Master access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-master
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rEtcdSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rMasterSG
    Properties:
      GroupName: !Sub ${pVPCName}-etcd
      GroupDescription: etcd access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        SourceSecurityGroupId: !Ref rMasterSG
      SecurityGroupEgress: # disable the default egress to 0.0.0.0/0
      - CidrIp: 127.0.0.1/16
        IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-etcd
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rEtcdPeerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rEtcdSG
    Properties:
      GroupId: !Ref rEtcdSG
      IpProtocol: tcp
      FromPort: 2380
      ToPort: 2380
      SourceSecurityGroupId: !Ref rEtcdSG

  rEtcdPeerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: rEtcdSG
    Properties:
      GroupId: !Ref rEtcdSG
      IpProtocol: tcp
      FromPort: 2380
      ToPort: 2380
      DestinationSecurityGroupId: !Ref rEtcdSG

  rNodeSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rMasterSG
    Properties:
      GroupName: !Sub ${pVPCName}-node
      GroupDescription: Openshift node access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        SourceSecurityGroupId: !Ref rMasterSG
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: udp
        FromPort: 8053
        ToPort: 8053
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 8053
        ToPort: 8053
        DestinationSecurityGroupId: !Ref rMasterSG
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-node
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName
        - Key: master.groupId
          Value: !GetAtt rMasterSG.GroupId
        - Key: master.groupName
          Value: !Ref rMasterSG

  # an Egress rule for the rMasterSG to permit the master to talk to Nodes
  rMasterToNodeEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
      DestinationSecurityGroupId: !Ref rNodeSG

  rUdpDns53Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: udp
      FromPort: 53
      ToPort: 53
      SourceSecurityGroupId: !Ref rNodeSG

  rTcpDns53Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 53
      ToPort: 53
      SourceSecurityGroupId: !Ref rNodeSG

  rUdpDns8053Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: udp
      FromPort: 8053
      ToPort: 8053
      SourceSecurityGroupId: !Ref rNodeSG

  rTcpDns8053Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 8053
      ToPort: 8053
      SourceSecurityGroupId: !Ref rNodeSG

  rOpenVSwitchIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rNodeSG
    Properties:
      GroupId: !Ref rNodeSG
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !Ref rNodeSG

  rOpenVSwitchEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: rNodeSG
    Properties:
      GroupId: !Ref rNodeSG
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      DestinationSecurityGroupId: !Ref rNodeSG

  rHAProxySG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rNodeSG
    Properties:
      GroupName: !Sub ${pVPCName}-haproxy
      GroupDescription: HA Proxy Ingress
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 1936
        ToPort: 1936
        SourceSecurityGroupId: !Ref rNodeSG
      SecurityGroupEgress: # disable the default egress to 0.0.0.0/0
      - CidrIp: 127.0.0.1/16
        IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-haproxy
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rPublicSSHSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: rVPC
    Properties:
      GroupName: !Sub ${pVPCName}-ssh
      GroupDescription: SSH access from DST
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pProductionCIDR
      SecurityGroupEgress: # disable the default egress to 0.0.0.0/0
      - CidrIp: !Ref pProductionCIDR
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-ssh
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rHudginsSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rPublicSSHSG
    Properties:
      GroupId: !Ref rPublicSSHSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 8443
      CidrIp: 136.33.81.197/32

Outputs:
    rVPC:
        Value: !Ref rVPC
        Export:
          Name: !Sub ${pVPCName}-vpcid
    rPublicRouteTable:
        Value: !Ref rRouteTableMain
        Export:
          Name: !Sub ${pVPCName}-publicRT
