AWSTemplateFormatVersion: 2010-09-09
Description: 'Provides networking configuration for an Openshift alpha VPC with NACL rules (qs-1nb14cqcl).'
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
                default: VPC Configuration
            Parameters:
              - pVPCName
              - pVPCCIDR
              - pMgmtCIDR
              - pAZ
              - pEnvironment
              - pVPCTenancy
        ParameterLabels:
            pVPCName:
                default: Name of VPC
            pVPCCIDR:
                default: VPC CIDR block
            pMgmtCIDR:
                default: Managment Subnet CIDR
            pAZ:
                default: Availability Zone
            pEnvironment:
                default: Environment

Parameters:
    pVPCName:
        Description: Production VPC Name
        Type: String
        Default: o7t-alpha
    pVPCCIDR:
        Description: CIDR block for Production VPC
        Type: String
        Default: 10.250.0.0/16
    pMgmtCIDR:
#        Description: CIDR block for Management subnet
        Type: String
        Default: 10.250.254.0/24
    pVPCTenancy:
        Description: Instance tenancy behavior for this VPC
        Type: String
        Default: default
        AllowedValues:
          - default
    pEnvironment:
        Description: Environment (alpha, CI/CD, or development)
        Type: String
        Default: alpha
        AllowedValues:
          - alpha
          - CI/CD
          - development
    pAZ:
        Description: Availability Zone
        Type: AWS::EC2::AvailabilityZone::Name
        Default: us-east-1e

Mappings:
  RegionMap:
    us-east-1:
      s3PrefixListId: pl-63a5400a
    us-east-2:
      s3PrefixListId: pl-7ba54012
    us-west-1:
      s3PrefixListId: pl-6ba54002
    us-west-2:
      s3PrefixListId: pl-68a54001

Resources:
  rDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: dst.cloud
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Ref pVPCName
      - Key: StackName
        Value: !Ref AWS::StackName

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref pVPCName
      - Key: Environment
        Value: !Ref pEnvironment
      - Key: StackName
        Value: !Ref AWS::StackName
      - Key: VPC
        Value: !Ref pVPCName

  rVPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    DependsOn: rVPC
    Properties:
      VpcId:
        Ref: rVPC
      DhcpOptionsId:
        Ref: rDHCPOptions

  rIGWProd:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
            - Key: Name
              Value: !Ref pVPCName
            - Key: Environment
              Value: !Ref pEnvironment

  rGWAttachmentProdIGW:
      Type: AWS::EC2::VPCGatewayAttachment
      DependsOn:
      - rIGWProd
      - rVPC
      Properties:
          VpcId: !Ref rVPC
          InternetGatewayId: !Ref rIGWProd

  rRouteTableMain:
      Type: AWS::EC2::RouteTable
      DependsOn: rVPC
      Properties:
          VpcId: !Ref rVPC
          Tags:
            - Key: Name
              Value: !Sub ${pVPCName}-public

  rRouteProdIGW:
      Type: AWS::EC2::Route
      DependsOn:
      - rGWAttachmentProdIGW
      - rRouteTableMain
      Properties:
          RouteTableId: !Ref rRouteTableMain
          GatewayId: !Ref rIGWProd
          DestinationCidrBlock: 0.0.0.0/0

  rRouteTablePrivate:
      Type: AWS::EC2::RouteTable
      DependsOn: rVPC
      Properties:
          VpcId: !Ref rVPC
          Tags:
            - Key: Name
              Value: !Sub ${pVPCName}-private

#
# allow access to AWS endpoints like S3 and EC2
# from within all subnets
#

  rVPCS3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    DependsOn:
    - rVPC
    - rRouteTableMain
    - rRouteTablePrivate
    Properties:
      RouteTableIds:
        - !Ref rRouteTableMain
        - !Ref rRouteTablePrivate
      ServiceName:
        !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref rVPC

  # this doesn't work in Cloudformation, ec2 is an "interface" and requires a "PrivateLink"
#  rVPCEc2Endpoint:
#    Type: "AWS::EC2::VPCEndpoint"
#    DependsOn:
#    - rVPC
#    - rRouteTableMain
#    - rRouteTablePrivate
#    Properties:
#      RouteTableIds:
#        - !Ref rRouteTableMain
#        - !Ref rRouteTablePrivate
#      ServiceName:
#        !Sub "com.amazonaws.${AWS::Region}.ec2"
#      VpcId: !Ref rVPC

#
# Create a Management subnet which interacts with all subnets
# The subnet contains the vpc endpoints for AWS services, so
# the NACLs need to permit external ip addresses
#

  rMgmtSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone: !Ref pAZ
        CidrBlock: !Ref pMgmtCIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${pVPCName}-mgmt
        VpcId: !Ref rVPC

  rMgmtRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - rMgmtSubnet
    - rRouteTableMain
    Properties:
      RouteTableId: !Ref rRouteTableMain
      SubnetId: !Ref rMgmtSubnet

  #
  # Network ACL Definition for the Management Subnet
  #

  rACLMgmt:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: !Sub ${pVPCName}-mgmt
      - Key: VPC
        Value: !Ref pVPCName

  rACLMgmtRule100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 170.40.0.0/16
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 22
        To: 9999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  rACLMgmtRuleEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 170.40.0.0/16
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  # Hudgins' home
  rACLMgmtRule101:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 136.33.81.197/32
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 22
        To: 9999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 101

  rACLMgmtRuleEgress101:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 136.33.81.197/32
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 101

  # for now, permit any internal traffic in/out thru the rACLPrivate and depend on security groups
  rACLMgmtRule200:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: !Ref pVPCCIDR
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 22
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200

  rACLMgmtRuleEgress200:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: !Ref pVPCCIDR
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200

  # these rules allow access to the s3 vpc endpoint and are specific to us-east-1
  rACLMgmtRule300:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 54.231.0.0/17
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300

  rACLMgmtRuleEgress300:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 54.231.0.0/17
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300

  rACLMgmtRule301:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 52.216.0.0/15
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 301

  rACLMgmtRuleEgress301:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 52.216.0.0/15
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 301

  # the Vault instance must access sts.amazonaws.com over the internet
  # TO DO:  restrict this list to a known set of IP ADDR's
  rACLMgmtRule400:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 400

  rACLMgmtRuleEgress400:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLMgmt
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref rACLMgmt
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 400

  rMgmtSubnetACLAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    DependsOn:
    - rACLMgmt
    - rMgmtSubnet
    Properties:
      SubnetId: !Ref rMgmtSubnet
      NetworkAclId: !Ref rACLMgmt

#
# Security Groups
#

  rVaultSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rVPCS3Endpoint
    Properties:
      GroupName: !Sub ${pVPCName}-vault
      GroupDescription: Vault
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pVPCCIDR
        Description: permit all instances within the VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationPrefixListId: !FindInMap [ RegionMap, !Ref "AWS::Region", s3PrefixListId ]
        Description: access to AWS S3 via vpc endpoint

      # the Vault instance must access sts.amazonaws.com over the internet
      # TO DO:  restrict this list to a known set of IP ADDR's
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: "TODO: restrict this to sts.amazonaws.com/iam.amazonaws.com"
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-vault
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rMasterSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rVPCS3Endpoint
    - rVaultSG
    Properties:
      GroupName: !Sub ${pVPCName}-master
      GroupDescription: Openshift Master access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rVaultSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationPrefixListId: !FindInMap [ RegionMap, !Ref "AWS::Region", s3PrefixListId ]
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-master
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rEtcdSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rMasterSG
    - rVaultSG
    Properties:
      GroupName: !Sub ${pVPCName}-etcd
      GroupDescription: etcd access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        SourceSecurityGroupId: !Ref rMasterSG
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rVaultSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationPrefixListId: !FindInMap [ RegionMap, !Ref "AWS::Region", s3PrefixListId ]
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-etcd
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rEtcdPeerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rEtcdSG
    Properties:
      GroupId: !Ref rEtcdSG
      IpProtocol: tcp
      FromPort: 2380
      ToPort: 2380
      SourceSecurityGroupId: !Ref rEtcdSG

  rEtcdPeerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: rEtcdSG
    Properties:
      GroupId: !Ref rEtcdSG
      IpProtocol: tcp
      FromPort: 2380
      ToPort: 2380
      DestinationSecurityGroupId: !Ref rEtcdSG

  rNodeSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rMasterSG
    - rEtcdSG
    - rVaultSG
    Properties:
      GroupName: !Sub ${pVPCName}-node
      GroupDescription: Openshift node access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        SourceSecurityGroupId: !Ref rMasterSG
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rVaultSG
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: udp
        FromPort: 8053
        ToPort: 8053
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 8053
        ToPort: 8053
        DestinationSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationPrefixListId: !FindInMap [ RegionMap, !Ref "AWS::Region", s3PrefixListId ]
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-node
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName
        - Key: master.groupId
          Value: !GetAtt rMasterSG.GroupId
        - Key: master.groupName
          Value: !Ref rMasterSG

  # an Egress rule for the rMasterSG to permit the master to talk to Nodes
  rMasterToNodeEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
      DestinationSecurityGroupId: !Ref rNodeSG

  rUdpDns53Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: udp
      FromPort: 53
      ToPort: 53
      SourceSecurityGroupId: !Ref rNodeSG

  rTcpDns53Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 53
      ToPort: 53
      SourceSecurityGroupId: !Ref rNodeSG

  rUdpDns8053Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: udp
      FromPort: 8053
      ToPort: 8053
      SourceSecurityGroupId: !Ref rNodeSG

  rTcpDns8053Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - rMasterSG
    - rNodeSG
    Properties:
      GroupId: !Ref rMasterSG
      IpProtocol: tcp
      FromPort: 8053
      ToPort: 8053
      SourceSecurityGroupId: !Ref rNodeSG

  rOpenVSwitchIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rNodeSG
    Properties:
      GroupId: !Ref rNodeSG
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !Ref rNodeSG

  rOpenVSwitchEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: rNodeSG
    Properties:
      GroupId: !Ref rNodeSG
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      DestinationSecurityGroupId: !Ref rNodeSG

  rHAProxySG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rNodeSG
    Properties:
      GroupName: !Sub ${pVPCName}-haproxy
      GroupDescription: HA Proxy Ingress
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 1936
        ToPort: 1936
        SourceSecurityGroupId: !Ref rNodeSG
      SecurityGroupEgress: # disable the default egress to 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4789
        ToPort: 4789
        DestinationSecurityGroupId: !Ref rNodeSG
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-haproxy
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rPublicSSHSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rVaultSG
    Properties:
      GroupName: !Sub ${pVPCName}-ssh
      GroupDescription: SSH access from DST
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 170.40.0.0/16
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pVPCCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rVaultSG
      - CidrIp: !Ref pVPCCIDR
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-ssh
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: VPC
          Value: !Ref pVPCName

  rHudginsSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: rPublicSSHSG
    Properties:
      GroupId: !Ref rPublicSSHSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 8443
      CidrIp: 136.33.81.197/32

  # This SG is used by VPC Endpoints to permit Nodes/Etcd to use AWS services w/o NAT
  rAWSInterfaceSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rMasterSG
    - rNodeSG
    - rEtcdSG
    - rVaultSG
    Properties:
      GroupName: !Sub ${pVPCName}-aws
      GroupDescription: Access to AWS services
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref rNodeSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref rEtcdSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref rMasterSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref rVaultSG
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-aws
        - Key: VPC
          Value: !Ref pVPCName

  rVaultToAWSEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rVaultSG
    - rAWSInterfaceSG
    Properties:
      GroupId: !Ref rVaultSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref rAWSInterfaceSG

  rNodeToAWSEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rNodeSG
    - rAWSInterfaceSG
    Properties:
      GroupId: !Ref rNodeSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref rAWSInterfaceSG

  rEtcdToAWSEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rEtcdSG
    - rAWSInterfaceSG
    Properties:
      GroupId: !Ref rEtcdSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref rAWSInterfaceSG

  # SecurityGroups for Prometheus clients and servers
  rPromServerSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rVaultSG
    - rAWSInterfaceSG
    Properties:
      GroupName: !Sub ${pVPCName}-prometheus-server
      GroupDescription: permissions for Prometheus
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-prometheus
        - Key: VPC
          Value: !Ref pVPCName
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rVaultSG
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        DestinationSecurityGroupId: !Ref rAWSInterfaceSG

  rPromMonitoredInstanceSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - rVPC
    - rPromServerSG
    Properties:
      GroupName: !Sub ${pVPCName}-prometheus-monitored-instance
      GroupDescription: permissions for Prometheus to access the instance
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9100
        ToPort: 9100
        SourceSecurityGroupId: !Ref rPromServerSG
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-prometheus-monitored-instance
        - Key: VPC
          Value: !Ref pVPCName

  rPromServerToMonitoredInstanceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
    - rPromServerSG
    - rPromMonitoredInstanceSG
    Properties:
      GroupId: !Ref rPromServerSG
      IpProtocol: tcp
      FromPort: 9100
      ToPort: 9100
      DestinationSecurityGroupId: !Ref rPromMonitoredInstanceSG

Outputs:
    rVPC:
        Value: !Ref rVPC
        Export:
          Name: !Sub ${pVPCName}-vpcid
    rPublicRouteTable:
        Value: !Ref rRouteTableMain
        Export:
          Name: !Sub ${pVPCName}-publicRT
    rPrivateRouteTable:
        Value: !Ref rRouteTablePrivate
        Export:
          Name: !Sub ${pVPCName}-privateRT
    rS3Endpoint:
        Value: !Ref rVPCS3Endpoint
        Export:
          Name: !Sub ${pVPCName}-s3Endpoint
    rAZ:
        Value: !Ref pAZ
        Export:
          Name: !Sub ${pVPCName}-az
    rMgmtCIDR:
        Value: !Ref pMgmtCIDR
        Export:
          Name: !Sub ${pVPCName}-mgmtCIDR
