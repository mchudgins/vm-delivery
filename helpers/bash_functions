#!/usr/bin/env bash

# is this a 'dirty' git repo?
function isDirty {
    # see https://gist.github.com/mjdominus/1486532
    git rev-parse --verify HEAD > /dev/null && \
            git update-index --ignore-submodules --refresh > /dev/null && \
            git diff-files --quiet --ignore-submodules && \
            git diff-index --cached --quiet HEAD --ignore-submodules -- || \
            echo -n "dirty"
    echo -n ""
}

# return the git commit hash, with (dirty) if working tree is dirty
function gitCommitHash {
    commit=`git rev-parse --verify HEAD`

    if [[ -n `isDirty` ]]; then
        commit="${commit} (dirty)"
    fi

    echo ${commit}
}

# return the 'origin' repo URL
function gitOriginURL {
    origin=`git remote get-url origin`
    rc=$?
    if [[ $rc != 0 ]]; then
        origin=""
    fi

    echo ${origin}
}

# find the most recent AMI with name <something>-<date string>
function mostRecentAMI {
    IMAGE_STREAM=$1

    # retrieve the list of ami's owned by this account
    IMAGES=`aws --region ${REGION} ec2 describe-images --owners self`

    # now find the latest image matching etcd-<date/time>
    ORIGIN_DATE="0000-00-00T00:00:00.000Z"
    MAX_DATE=${ORIGIN_DATE}
    MAX_IMAGE_INDEX=-1

    image_count=`echo ${IMAGES} | jq '.[] | length'`
    for i in `seq 1 ${image_count}`; do
      var=`expr $i - 1`
      name=`echo ${IMAGES} | jq .Images[$var].Name`
      IFS='-' read -ra NAME <<< "${name//\"/}"
      if [[ ${#NAME[@]} -eq 2 ]]; then
        if [[ ${NAME[0]} == "${IMAGE_STREAM}" ]]; then
          IMAGE_DATE=`echo ${IMAGES} | jq .Images[$var].CreationDate`
          if [[ "${MAX_DATE}" < "${IMAGE_DATE}" ]]; then
            MAX_DATE=${IMAGE_DATE}
            MAX_IMAGE_INDEX=${var}
          fi
        fi
      fi
    done

    IMAGE_ID=`echo ${IMAGES} | jq .Images[${MAX_IMAGE_INDEX}].ImageId`

    echo ${IMAGE_ID} | sed -e 's/\"//g'

    if [[ ${MAX_IMAGE_INDEX} -eq -1 ]]; then
        return 1
    else
        return 0
    fi
}

# launch SPOT instance
function launchSpotInstance {
    REGION=$1
    BID_PRICE=$2
    FILE=$3

    cmd="aws --region ${REGION} ec2 request-spot-instances --spot-price ${BID_PRICE} --instance-count 1 --type one-time --launch-specification file://${FILE}"
    rc=`${cmd}`
    if [[ $? != 0 ]]; then
        echo $rc
        exit 1
    fi

    requestID=`echo ${rc} | jq .SpotInstanceRequests[0].SpotInstanceRequestId | sed -e 's/"//g'`
    if [[ -z "${requestID}" ]]; then
        echo "Unable to find Spot Request ID"
        return 1
    fi

    # wait up to 5 minutes for an instance & either tag it or exit with error
    sleep 15
    instanceID=`aws --region ${REGION} ec2 describe-spot-instance-requests --spot-instance-request ${requestID} \
        | jq .SpotInstanceRequests[0].InstanceId | sed -e 's/"//g'`
#    echo instanceID ${instanceID}

    while [[ "${instanceID}" == "null" ]]
      do
      sleep 5
      instanceID=`aws --region ${REGION} ec2 describe-spot-instance-requests --spot-instance-request ${requestID} \
        | jq .SpotInstanceRequests[0].InstanceId | sed -e 's/"//g'`
      done
    echo ${instanceID}
}
