#!/usr/bin/env bash

# is this a 'dirty' git repo?
function isDirty {
    # see https://gist.github.com/mjdominus/1486532
    git rev-parse --verify HEAD > /dev/null && \
            git update-index --ignore-submodules --refresh > /dev/null && \
            git diff-files --quiet --ignore-submodules && \
            git diff-index --cached --quiet HEAD --ignore-submodules -- || \
            echo -n "dirty"
    echo -n ""
}

# return the git commit hash, with (dirty) if working tree is dirty
function gitCommitHash {
    commit=`git rev-parse --verify HEAD`

    if [[ -n `isDirty` ]]; then
        commit="${commit} (dirty)"
    fi

    echo ${commit}
}

# return the 'origin' repo URL
function gitOriginURL {
    origin=`git remote get-url origin`
    rc=$?
    if [[ $rc != 0 ]]; then
        origin=""
    fi

    echo ${origin}
}

# tag an AMI (and the underlying EBS snapshot) with important data
function tagAMI {
AMI_NAME=$1
IMAGE_STREAM=$2
PARENT_AMI=$3

# retrieve the list of ami's owned by this account
IMAGES=`aws --region ${REGION} ec2 describe-images --owners self`

image_count=`echo ${IMAGES} | jq '.[] | length'`
for i in `seq 1 ${image_count}`; do
  var=`expr $i - 1`
  name=`echo ${IMAGES} | jq .Images[$var].Name | sed -e s/\"//g`
  if [[ ${name} == "${AMI_NAME}" ]]; then
    newAmi=`echo ${IMAGES} | jq .Images[$var].ImageId | sed -e s/\"//g`
    snapShotID=`echo ${IMAGES} | jq .Images[$var].BlockDeviceMappings[0].Ebs.SnapshotId | sed -e s/\"//g`
    echo Tagging AMI ${newAmi} with tag ParentAMI=${PARENT_AMI}
    aws --region ${REGION} ec2 create-tags --resources ${newAmi} --tags \
        Key=ParentAMI,Value=${PARENT_AMI} \
        Key=ImageStream,Value=${IMAGE_STREAM} \
        Key="git.commit",Value="$(gitCommitHash)" \
        Key="git.origin",Value="$(gitOriginURL)"
    aws --region ${REGION} ec2 create-tags --resources ${snapShotID} --tags Key=Name,Value=${AMI_NAME} \
        Key=ImageStream,Value=${IMAGE_STREAM}
    return 0
  fi
done

echo "Unable to tag newly created AMI ${AMI_NAME}"
return 1
}