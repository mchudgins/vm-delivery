#!/usr/bin/env bash

# is this a 'dirty' git repo?
function isDirty {
    # see https://gist.github.com/mjdominus/1486532
    git rev-parse --verify HEAD > /dev/null && \
            git update-index --ignore-submodules --refresh > /dev/null && \
            git diff-files --quiet --ignore-submodules && \
            git diff-index --cached --quiet HEAD --ignore-submodules -- || \
            echo -n "dirty"
    echo -n ""
}

# return the git commit hash, with (dirty) if working tree is dirty
function gitCommitHash {
    commit=`git rev-parse --verify HEAD`

    if [[ -n `isDirty` ]]; then
        commit="${commit} (dirty)"
    fi

    echo ${commit}
}

# return the 'origin' repo URL
function gitOriginURL {
    origin=`git remote get-url origin`
    rc=$?
    if [[ $rc != 0 ]]; then
        origin=""
    fi

    echo ${origin}
}

# some instance types are EBS "Optimizable"
function isEBSOptimizable {
    instance_type=$1

    result=false

    IFS="." read -r -a el <<< "${instance_type}"
    case "${el[0]}" in
        m4)
            result=true
            ;;

        m5)
            result=true
            ;;

        r4)
            result=true
            ;;

        *)
            ;;
    esac

    echo ${result}
}


# tag an AMI (and the underlying EBS snapshot) with important data
function tagAMI {
    AMI_NAME=$1
    IMAGE_STREAM=$2
    PARENT_AMI=$3

    # retrieve the list of ami's owned by this account
    IMAGES=`aws --region ${REGION} ec2 describe-images --owners self`

    image_count=`echo ${IMAGES} | jq '.[] | length'`
    for i in `seq 1 ${image_count}`; do
      var=`expr $i - 1`
      name=`echo ${IMAGES} | jq .Images[$var].Name | sed -e s/\"//g`
      if [[ ${name} == "${AMI_NAME}" ]]; then
        newAmi=`echo ${IMAGES} | jq .Images[$var].ImageId | sed -e s/\"//g`
        snapShotID=`echo ${IMAGES} | jq .Images[$var].BlockDeviceMappings[0].Ebs.SnapshotId | sed -e s/\"//g`
        echo Tagging AMI ${newAmi} with tag ParentAMI=${PARENT_AMI}
        aws --region ${REGION} ec2 create-tags --resources ${newAmi} --tags \
            Key=ParentAMI,Value=${PARENT_AMI} \
            Key=ImageStream,Value=${IMAGE_STREAM} \
            Key="git.commit",Value="$(gitCommitHash)" \
            Key="git.origin",Value="$(gitOriginURL)"
        aws --region ${REGION} ec2 create-tags --resources ${snapShotID} --tags Key=Name,Value=${AMI_NAME} \
            Key=ImageStream,Value=${IMAGE_STREAM}
        return 0
      fi
    done

    echo "Unable to tag newly created AMI ${AMI_NAME}"
    return 1
}

# find the most recent AMI with name <something>-<date string>
function mostRecentAMI {
    IMAGE_STREAM=$1

    # retrieve the list of ami's owned by this account
    IMAGES=`aws --region ${REGION} ec2 describe-images --owners self`

    # now find the latest image matching <IMAGE_STREAM>-<date/time>
    ORIGIN_DATE="0000-00-00T00:00:00.000Z"
    MAX_DATE=${ORIGIN_DATE}
    MAX_IMAGE_INDEX=-1

    image_count=`echo ${IMAGES} | jq '.[] | length'`
    for i in `seq 1 ${image_count}`; do
      var=`expr $i - 1`
      name=`echo ${IMAGES} | jq .Images[$var].Name`
      tagLen=`echo ${IMAGES} | jq ".Images[$var].Tags | length"`
      for j in `seq 1 ${tagLen}`; do
        iter=`expr $j - 1`
        tagName=`echo ${IMAGES} | jq .Images[$var].Tags[$iter].Key | sed -e 's/"//g'`
        if [[ ${tagName} == "ImageStream" ]]; then
            imageStream=`echo ${IMAGES} | jq .Images[$var].Tags[$iter].Value | sed -e 's/"//g'`
            if [[ "${IMAGE_STREAM}" == ${imageStream} ]]; then
              IMAGE_DATE=`echo ${IMAGES} | jq .Images[$var].CreationDate`
              if [[ "${MAX_DATE}" < "${IMAGE_DATE}" ]]; then
                MAX_DATE=${IMAGE_DATE}
                MAX_IMAGE_INDEX=${var}
              fi
            fi
        fi
      done
    done

    if [[ ${MAX_IMAGE_INDEX} -eq -1 ]]; then
        echo "not found"
        return 1
    else
        IMAGE_ID=`echo ${IMAGES} | jq .Images[${MAX_IMAGE_INDEX}].ImageId`
        echo ${IMAGE_ID} | sed -e 's/\"//g'
        return 0
    fi
}

# launch SPOT instance
function launchSpotInstance {
    REGION=$1
    BID_PRICE=$2
    FILE=$3

    cmd="aws --region ${REGION} ec2 request-spot-instances --spot-price ${BID_PRICE} --instance-count 1 --type one-time --launch-specification file://${FILE}"
    rc=`${cmd}`
    if [[ $? != 0 ]]; then
        echo $rc
        exit 1
    fi

    requestID=`echo ${rc} | jq .SpotInstanceRequests[0].SpotInstanceRequestId | sed -e 's/"//g'`
    if [[ -z "${requestID}" ]]; then
        echo "Unable to find Spot Request ID"
        return 1
    fi

    # wait up to 5 minutes for an instance & either tag it or exit with error
    sleep 15
    instanceID=`aws --region ${REGION} ec2 describe-spot-instance-requests --spot-instance-request ${requestID} \
        | jq .SpotInstanceRequests[0].InstanceId | sed -e 's/"//g'`
#    echo instanceID ${instanceID}

    while [[ "${instanceID}" == "null" ]]
      do
      sleep 5
      instanceID=`aws --region ${REGION} ec2 describe-spot-instance-requests --spot-instance-request ${requestID} \
        | jq .SpotInstanceRequests[0].InstanceId | sed -e 's/"//g'`
      done
    echo ${instanceID}
}

# launch an On Demand instance
function launchInstance {
    REGION=$1
    FILE=$2
    USERDATA=$3

    cmd="aws --region ${REGION} ec2 run-instances --count 1 \
            --instance-initiated-shutdown-behavior terminate \
            --user-data file://${USERDATA} \
            --cli-input-json file://${FILE}"
    rc=`${cmd}`
    if [[ $? != 0 ]]; then
        echo $rc
        exit 1
    fi

    instanceID=`echo ${rc} | jq .Instances[0].InstanceId | sed -e 's/"//g'`

    echo ${rc} >/tmp/run.json
    echo ${instanceID}
}

# update DNS entry
function upsertDNS {
    name=$1
    ipaddr=$2
    instanceID=$3

    FILE=`mktemp`
    cat <<EOF >${FILE}
{
    "Comment": "Update record to reflect public IP address of instance ${instanceID}",
    "Changes": [
        {
            "Action": "UPSERT",
            "ResourceRecordSet": {
                "Name": "${name}",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [
                    {
                        "Value": ${ipaddr}
                    }
                ]
            }
        }
    ]
}
EOF

    ZONEID=`aws route53 list-hosted-zones | jq '.[][] | select(.Name=="dstcorp.io.") | .Id' | sed  -s 's/"//g' | sed -s 's|/hostedzone/||g'`
    aws route53 change-resource-record-sets --hosted-zone-id ${ZONEID} --change-batch file://${FILE}
    aws --region ${REGION} ec2 create-tags --resources ${instanceID} --tags Key=DNS,Value=${name}

    rm ${FILE}
}

# find a VPC in the region with a specified tag
function findVPCWithTag {
REGION=$1
TAGKEY=$2

value=`aws --region ${REGION} ec2 describe-vpcs --filters Name="tag-key",Values="${TAGKEY}" | jq .Vpcs[0].VpcId \
    | sed -e 's/"//g'`
echo ${value}
}

# find a subnet with a specified tag
function findSubnetWithTag {
region=$1
vpc=$2
tagkey=$3

aws --region ${region} ec2 describe-subnets --filters Name=vpc-id,Values="${vpc}" Name=tag-key,Values="${tagkey}" \
    | jq .Subnets[0].SubnetId \
    | sed -e 's/"//g'
}

# find a security group in the vpc with the specifed tag
function findSecurityGroupWithTag {
region=$1
vpc=$2
tagkey=$3

aws --region ${region} ec2 describe-security-groups --filters Name=vpc-id,Values="${vpc}" Name=tag-key,Values="${tagkey}" \
    | jq .SecurityGroups[0].GroupId | sed -e 's/"//g'
}