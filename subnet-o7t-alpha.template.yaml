AWSTemplateFormatVersion: 2010-09-09
Description: 'Provides subnet configuration for an Openshift alpha environment with NACL rules (qs-1nb14cqcl).'
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
                default: Subnet Configuration
            Parameters:
              - pVPC
              - pClusterName
              - pPublicCIDR
              - pPrivateCIDR
              - pMgmtCIDR
              - pAZ
        ParameterLabels:
            pVPC:
                default: VPC
            pClusterName:
                default: Cluster Name
            pPublicCIDR:
                default: Public Subnet CIDR
            pPrivateCIDR:
                default: Private Subnet CIDR
            pMgmtCIDR:
                default: Management Subnet CIDR
            pAZ:
                default: Availability Zone

Parameters:
    pVPC:
        Description: VPC
        Type: AWS::EC2::VPC::Id
    pClusterName:
        Description: (a-z[a-z|0-9]*)
        Type: String
        Default: (your initials)
    pPublicCIDR:
        Description: CIDR block for Public Subnet
        Type: String
        Default: 10.250.0.0/24
    pPrivateCIDR:
        Description: CIDR block for Private Subnet
        Type: String
        Default: 10.250.1.0/24
    pMgmtCIDR:
        Description: CIDR block for Mgmt Subnet
        Type: String
        Default: 10.250.2.0/24
    pAZ:
        Description: Availability Zone
        Type: AWS::EC2::AvailabilityZone::Name

Resources:
  rPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone: !Ref pAZ
        CidrBlock: !Ref pPublicCIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${pClusterName}-public
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Cluster
            Value: !Ref pClusterName
        VpcId: !Ref pVPC

  rPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone: !Ref pAZ
        CidrBlock: !Ref pPrivateCIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${pClusterName}-private
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Cluster
            Value: !Ref pClusterName
        VpcId: !Ref pVPC

  rMgmtSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone: !Ref pAZ
        CidrBlock: !Ref pMgmtCIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${pClusterName}-mgmt
          - Key: StackName
            Value: !Ref AWS::StackName
          - Key: Cluster
            Value: !Ref pClusterName
        VpcId: !Ref pVPC

  rACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref pVPC
      Tags:
      - Key: Name
        Value: !Sub ${pClusterName}-pub
      - Key: Cluster
        Value: !Ref pClusterName

  rACLRule100:
    DependsOn: rACL
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 170.40.0.0/16
      Egress: false
      NetworkAclId: !Ref rACL
      PortRange:
        From: 22
        To: 8443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  rACLRuleEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: 170.40.0.0/16
      Egress: true
      NetworkAclId: !Ref rACL
      PortRange:
        From: 32768
        To: 60999
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  # Hudgins' home
  rACLRule101:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: 136.33.81.197/32
      Egress: false
      NetworkAclId: !Ref rACL
      PortRange:
        From: 22
        To: 8443
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  rACLRuleEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: 136.33.81.197/32
      Egress: true
      NetworkAclId: !Ref rACL
      PortRange:
        From: 32768
        To: 60999
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  # for now, permit any internal traffic in/out thru the rACLPrivate and depend on security groups
  rACLRule200:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: !Ref pPrivateCIDR
      Egress: false
      NetworkAclId: !Ref rACL
      PortRange:
        From: 22
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200

  rACLRuleEgress200:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: !Ref pPrivateCIDR
      Egress: true
      NetworkAclId: !Ref rACL
      PortRange:
        From: 32768
        To: 60999
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200

  rACLRule250:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: !Ref pMgmtCIDR
      Egress: false
      NetworkAclId: !Ref rACL
      PortRange:
        From: 22
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 250

  rACLRuleEgress250:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACL
    Properties:
      CidrBlock: !Ref pMgmtCIDR
      Egress: true
      NetworkAclId: !Ref rACL
      PortRange:
        From: 0
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 250

  rACLPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref pVPC
      Tags:
      - Key: Name
        Value: !Sub ${pClusterName}-priv
      - Key: Cluster
        Value: !Ref pClusterName

  rACLMgmt:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref pVPC
      Tags:
      - Key: Name
        Value: !Sub ${pClusterName}-mgmt
      - Key: Cluster
        Value: !Ref pClusterName

  rACLPrivateRule100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLPrivate
    Properties:
      CidrBlock: !Ref pProductionCIDR
      Egress: false
      NetworkAclId: !Ref rACLPrivate
      PortRange:
        From: 22
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  rACLPrivateRuleEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    DependsOn: rACLPrivate
    Properties:
      CidrBlock: !Ref pProductionCIDR
      Egress: true
      NetworkAclId: !Ref rACLPrivate
      PortRange:
        From: 0
        To: 64000
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

Outputs:
    rPublicSubnet:
        Value: !Ref rPublicSubnet
        Export:
          Name: !Sub ${AWS::StackName}-public-subnet
